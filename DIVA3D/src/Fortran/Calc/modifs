TRKELE:
diavinc.h 
esterr.f (uses)
solver.f (creates) a
stores.f (uses)
replaced dimension by allody 3*12*NELT and parameter in ckele2 et ckele3, extr* and extr* (called in solver): allody in solver
the integer index ijmbw for checking is disabled


Test with -O0 et -O3 sur errormarina 






L Variable
cksel2: ajoute trois arguments RL0,RL1,RL2 (longeur relative aux coins de l'élément) et adapté le remplissage
itcs surchargé:
1: adection
2: L variable
3 advection+L variable (attention allody a modifier)
Verifier que activation de contraint itcs=2 ne rallentit pas calcul par mise d'un flag pour l'advection



dans datapr, modifiction d'appel a llody pour ne dimensioner que la ncaz reellement nécessaire





allody: utilisation: on connait en entrée nnt1, nnint et nelt

               REEL                       INTEGER

bcondi:        NCOND                      2*NCOND    (seulement si appel au module bcondi (paramtre=ncond)
constr:        nnpr*nnt1                           nnpr=2 avection, 1 Lvariable, 3 advection+lvariable
               
temporaire     max(nxu*nyu+1,nxl*nyl/2+1)              nxu,nyu: grille contrainte u si actif
                                                      nxl,nyl: grille L variable si actif
                                                      
datapr         4*ndata                     4*ndata
                                           nelt
                                           ncax*ncay*ncaz (ncaz reel)

esterr         nx*ny                                   grille sortie (si ispec adequat, voir sortie netcdf)

meshgen                       pas appele


solver         nelt                        40
               nterm                                      nterm dynamique, a majorer par nddlt*nddlt
               1
               nterm
               nddlt*2                                    nddlt=3*nnt1+nnint
               nddle*nddle                                nddle majore par 16 ityp=3)
               nddle
               320
               nddle*nddle
               3*12*NELT
stores         nx*ny
topolo         nnt1*2                            nnt*2
               nelt*2                            nddlt+1
                                                 nnel*nelt
                                                 nddle                            



                                                 
                                                 
                                                 
                                                 
                                                 
Tester nouveau module 

covar: après execution classique avec un seul point de données (à un coin d'un element, avec mu petit), au lieu de lancer esterr, lancer covar,
qui pour chaque point d'une series de points, calcule la solution une liste d'autres points et au point du fichier en cours.
Pour avoir la series de points 1,garder la structure de esterr et au debut lire la serie 2 (les vraies données), les localiser et stocker leur element.
Exploite la decomposition LU du solver avec Woodbury-Sherman.
Pour ce faire probablement adapter un calgel en calgel2 (qui cree le second membre base sur la position et l'élément)
ok, fait,

reste a faire la boucle sur les points ncvdata pour y extraire la solution en plus du point lui meme (deja fait).
