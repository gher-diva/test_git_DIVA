#!/bin/bash
#
#  Correlation Length parameters (CL) estimation
#  for levels between $lay1 and $lay2. The estimated
#  CLs are bounded by the given values in the 3Dinfo
#  file or in the CLminmax file. They are then filtered
#  vertically if the $parop flag has a negative value. 
#
#####################################################
#
rm -f ./output/RLM.dat
#
  Fileinf=./input/3Dinfo
{
read comment
read var
read comment
read lay1
read comment
read lay2
read comment
read comment
read comment
read comment
read comment
read parop
read comment
read comment
read comment
read minlen
read comment
read maxlen
read comment
read minsn
read comment
read maxsn
} < $Fileinf
#
if [ -f ./input/divaparam/CLminmax ];then
# echo 'diva3Dclop: Using  CLminmax file'
 if [ -d ./3DWORK ]; then
  rm -rf ./3DWORK
 fi
 mkdir -p ./3DWORK
 cd  ./3DWORK
 ../../bin/wclfile.a
 cd ../
else
# echo 'diva3Dclop: Using  CL minmax from 3Dinfo file'
 if [ -d ./3DWORK ]; then
:
 else
  mkdir -p ./3DWORK
 fi
 cd  ./3DWORK
 echo $minsn > ./fort.11
 echo $maxsn >> ./fort.11
 cd ../
fi
#
#Cleaning work directories first
./divaclean
#
##
##   fiting CL parameters
##
#
dep=$lay1
if [ -f './output/'$var'.CL.dat' ];then
rm -f './output/'$var'.CL.dat'
rm -f './output/'$var'.Lay.dat'
fi
#
errflag=0
#
dep=$lay1
while [ $dep -le $lay2 ]
do
 let lev=10000+$dep
#
echo ' '
echo ' '
echo 'oooooooooooooooooooooooooooooooooooooooooooooooo'
echo 'diva3Dclop: determination of CL for level: '$lev
echo 'oooooooooooooooooooooooooooooooooooooooooooooooo'
#
if [ -f ./input/divaparam/param.par.$var'.'$lev ];then
# echo '!! diva3Dclop param.par.'$var'.'$lev' found '
 cp -f ./input/divaparam/param.par.$var'.'$lev ./input/divaparam/param.par.$var'.'$lev'.ori'
 cp -f ./input/divaparam/param.par.$var'.'$lev ./input/param.par
else
  if [ -f ./input/divaparam/param.par.$lev ];then
#   echo '!! diva3Dclop using param.par.$lev from ./input/divaparam '
   cp -f ./input/divaparam/param.par.$lev ./input/.
   echo JMB B
   cp -f ./input/divaparam/param.par.$lev ./input/divaparam/param.par.$var'.'$lev
  else
    if [ -f ./input/divaparam/param.par.$var ];then
 #    echo '!! diva3Dclop using param.par.$var from ./input/divaparam '
     cp -f ./input/divaparam/param.par.$var ./input/.
     echo JMB B
     cp -f ./input/divaparam/param.par.$var ./input/divaparam/param.par.$var'.'$lev
    else
     if [ -f ./input/divaparam/param.par ];then
#       echo '!! diva3Dclop using param.par from ./input/divaparam '
       cp -f ./input/divaparam/param.par ./input/.
#       echo JMB B
       cp -f ./input/divaparam/param.par ./input/divaparam/param.par.$var'.'$lev
     else
      if [ -f ./input/param.par ];then
#         echo '!! diva3Dclop using param.par found in ./input '
         cp -f ./input/param.par ./input/divaparam/param.par.$var'.'$lev
      fi
     fi
    fi
  fi
fi
#
if [ -f ./input/param.par ];then
 runflag=0
else
 runflag=1
fi
#
#
if [ -f ./input/divaparam/coast.cont.$lev ];then
 cp -f ./input/divaparam/coast.cont.$lev  ./input/coast.cont
else
 echo '!!!!! diva3Dclop did not find coast.cont.'$lev' in divaparam/ !!!!!'
 runflag=3
fi
#
#
if [ -f ./input/divadata/$var.$lev ];then
 cp -f ./input/divadata/$var.$lev  ./input/data.dat
 nbdat=`cat './input/data.dat' |wc -l` 
 if [ "$nbdat" == "0" ] ; then
  runflag=4
 fi
else
 echo '!!!!! diva3Dclop did not find '$var'.'$lev' in divadata/ !!!!!'
 runflag=2
fi
#
if [ -d ./input/divamesh ]; then
 fmeshe=1
else
 mkdir -p ./input/divamesh
 mkdir -p ./output/3Danalysis/Meshes
 fmeshe=0
fi
#
#
if [ "$runflag" -eq "0" ];then
#--------------------------
#echo '>>>> looking for reference field for '$var'.'$lev' <<<<< '
#
refdat=0
#
if [ -f ./input/divarefe/$var'.'$lev'.datapoint.ref' ];then
refdat=1
 cp -v ./input/divarefe/$var'.'$lev'.datapoint.ref' ./output/fieldatdatapoint.anl.ref
 cp -v ./input/divarefe/GridInfo.dat  ./output/ghertonetcdf/GridInfo.dat
fi
if [ -f ./input/divarefe/$var'.'$lev'.ref' ];then
   refdat=1
   cp -v ./input/divarefe/$var'.'$lev'.ref' ./output/fieldgher.anl.ref
   cp -v ./input/divarefe/GridInfo.dat  ./output/ghertonetcdf/GridInfo.dat
fi
if [  "$refdat" == "1" ];then
   ./divaanom
#
fi
#
##################### constraint
#
if [ -f ./input/divaparam/3Dconstraint ]
then
dep=10001
  Fileinf=./input/divaparam/3Dconstraint
{
while [ $dep -le $lev ]
do
read constvals
dep=`expr $dep + 1`
done
} < $Fileinf
echo $constvals > ./input/constraint.dat
fi
#
if [ -f ./input/constraint.dat ]
then
 if [ -f ./input/divaUVcons/UVinfo.$var.$lev ];then
  cp -f ./input/divaUVcons/UVinfo.$var.$lev ./input/UVinfo.dat
 else
  if [ -f ./input/divaUVcons/UVinfo.$lev ];then
   cp -f ./input/divaUVcons/UVinfo.$lev ./input/UVinfo.dat
  else
   if [ -f ./input/divaUVcons/UVinfo.dat ];then
    cp -f ./input/divaUVcons/UVinfo.dat ./input/UVinfo.dat
   fi
  fi
 fi
#
 if [ -f ./input/divaUVcons/Uvel.$var.$lev ];then
  cp -f ./input/divaUVcons/Uvel.$var.$lev ./input/Uvel.dat
 else
  if [ -f ./input/divaUVcons/Uvel.$lev ];then
   cp -f ./input/divaUVcons/Uvel.$lev ./input/Uvel.dat
  else
   if [ -f ./input/divaUVcons/Uvel.dat ];then
    cp -f ./input/divaUVcons/Uvel.dat ./input/Uvel.dat
   fi
  fi
 fi
#
 if [ -f ./input/divaUVcons/Vvel.$var.$lev ];then
  cp -f ./input/divaUVcons/Vvel.$var.$lev ./input/Vvel.dat
 else
  if [ -f ./input/divaUVcons/Vvel.$lev ];then
   cp -f ./input/divaUVcons/Vvel.$lev ./input/Vvel.dat
  else
   if [ -f ./input/divaUVcons/Vvel.dat ];then
    cp -f ./input/divaUVcons/Vvel.dat ./input/Vvel.dat
   fi
  fi
 fi
fi
############################
#
if [ "$refdat" -eq "0" ];then
echo '>>>>>>>>>>>> did not find reference field for '$var'.'$lev'  <<<<<<<< '
fi
##
small="100"
medium="2000"
nblines=`cat './input/data.dat' |wc -l` 
nbdat=$nblines
#
if [ -f ./input/divaparam/CLminmax ];then
Fileinf=./3DWORK/cl.$lev
{
read minlec
read maxlec
} < $Fileinf
else
minlec=$minlen
maxlec=$maxlen
fi
#
if [ -f ./output/paramfit.dat ];then
rm ./output/paramfit.dat 
rm ./output/param.par.fit
fi
#
if [ "$parop" -ge "10" -o  "$parop" -le "-10" ];then
 if [ -f ./input/divamesh/meshtopo.$lev ]; then
   cp -v ./input/divamesh/meshtopo.$lev ./output/meshvisu/fort.22
   cp -v ./input/divamesh/mesh.dat.$lev ./output/meshvisu/fort.23
   cp -v ./input/divaparam/coast.cont.$lev ./output/meshvisu/fort.10
  else
   echo 'diva3Dclop: generating a mesh for '$var'.'$lev
  divamesh
   cp -v ./output/meshvisu/fort.22 ./input/divamesh/meshtopo.$lev
   cp -v ./output/meshvisu/fort.23 ./input/divamesh/mesh.dat.$lev
   cp -v ./output/meshvisu/fort.10 ./input/divaparam/coast.cont.$lev
  fi
./divadatacoverage -n
if [ "$nbdat" -le "$small" ]
then
echo ===============
echo Small data set
echo ===============
divafit -r -l
else
  if [ "$nbdat" -le "$medium" ]
  then
  echo ===============
  echo Medium data set
  echo ===============
  divafit -r -l
    else
  echo ==============
  echo Large data set
  echo ==============
  divafit -r $medium -l
  fi
fi
else
if [ "$nbdat" -le "$small" ]
then
echo ===============
echo Small data set
echo ===============
divafit -r
else
  if [ "$nbdat" -le "$medium" ]
  then
  echo ===============
  echo Medium data set
  echo ===============
  divafit -r
    else
  echo ==============
  echo Large data set
  echo ==============
  divafit -r $medium
  fi
fi
fi
# JMB TEST
##divadatacoverage -n 
##cat divawork/fort.66 >> ./output/RLM.dat
##mv -f ./output/RL.dat ./input/divaparam/RL.$var.$lev
##mv -f ./output/RLinfo.dat ./input/divaparam/RLinfo.dat
##mv -f ./output/DATABINS.dat ./input/divadata/$var'.'$lev'.DATABINS'
##mv -f ./output/DATABINSinfo.dat ./input/divadata/$var'.'$lev'.DATABINSinfo'
##
# END JMB TEST
#
if [ -f ./output/param.par.fit ];then
#
cp ./output/param.par.fit './output/param.par.fit.'$var'.'$lev 
mv ./output/covariancefit.dat './output/covariancefit.'$var'.'$lev 
mv ./output/covariance.dat './output/covariance.'$var'.'$lev
#
#
Fileinf='./output/param.par.fit'
{
read comment
read param1
} < $Fileinf
#
##Fileinf=./output/paramfit.dat
##{
##read comment
##read paramfv
##read comment
##read snpar
##} < $Fileinf
#
##param1=$paramfv
###############
#
else
echo '??????????????????????????????????????????????????????????'
echo '?? Did not find param.par.fit.dat for '$var'.'$lev
echo '??????????????????????????????????????????????????????????'
#
param1=$minlec
###############
#
fi
#
if [ -f ./output/meandistance.dat ];then
#
Fileinf='./output/meandistance.dat'
{
read comment
read MRL
} < $Fileinf
#
echo 'ooooooooooo For information: Mean lenth scale: '$MRL
fi
#
echo 'ooooooooooo CL optimal val : ' $param1
############################################################
echo $minlec > ./3DWORK/MinMaxVa
echo $maxlec >> ./3DWORK/MinMaxVa
echo $param1 >> ./3DWORK/MinMaxVa
cd ./3DWORK
../../bin/boundval.a
cd ../
Fileinf=./3DWORK/ParamVal
{
read param1
} < $Fileinf
echo 'ooooooooooo CL considered val = ' $param1
#
echo $param1 >> './output/'$var'.CL.dat'
echo $dep >> './output/'$var'.Lay.dat'
else
#
let errflag=$errflag+1
#
if [ "$runflag" -eq "1" ];then
echo '!!!!!!!!!!!!!diva3Dclop WARNING: !!!!!!!!!!!!!!!!!!'
echo '!!!!!!!!!!!!!DID NOT FIND ANY param.par FILE FOR '$var $lev'!' 
echo '!!!!!!!!!!!!!THE OPTIMISATION WAS NOT PERFORMED !'
echo '!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
else
if [ "$runflag" -eq "2" ];then
echo '!!!!!!!!!!!!!diva3Dclop WARNING: !!!!!!!!!!!!!!!!!!'
echo '!!!!!!!!!!!!!DID NOT FIND DATA FILE FOR '$var $lev'!' 
echo '!!!!!!!!!!!!!THE OPTIMISATION WAS NOT PERFORMED !'
echo '!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
else
if [ "$runflag" -eq "3" ];then
echo '!!!!!!!!!!!!!diva3Dclop WARNING: !!!!!!!!!!!!!!!!!!'
echo '!!!!!!!!!!!!!DID NOT FIND CONTOUR FILE FOR '$var $lev'!' 
echo '!!!!!!!!!!!!!THE OPTIMISATION WAS NOT PERFORMED !'
echo '!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
else
if [ "$runflag" -eq "4" ];then
echo '!!!!!!!!!!!!!diva3Dclop WARNING: !!!!!!!!!!!!!!!!!!'
echo '!!!!!!!!!!DATA FILE  '$var $lev' IS EMPTY!' 
echo '!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
fi
fi
fi
fi
#
fi
#
dep=`expr $dep + 1`
done
#
#
if [ -f './output/'$var'.CL.dat' ];then
##if [ "$errflag" == "0" ];then
#
cp -v ./output/${var}.CL.dat ./input/divaparam/${var}.CL.dat.notfiltered
#echo Non filtered CL.dat:
#cat ./output/${var}.CL.dat
#
#                 **********
#
if [ "$parop" -le "-1" ];then
llll=`cat './output/'$var'.CL.dat' |wc -l` 
##let llll=${lay2}-${lay1}
if [ "$llll" -gt "0" ]
then
echo Filtering CL file ${var}.CL.dat
awkfilter ./output/${var}.CL.dat > bidon
mv ./output/${var}.CL.dat ./output/${var}.CL.dat.ori
#echo 'Filtered CL.dat:'
#cat bidon
mv bidon ./output/${var}.CL.dat
echo Finished filtering
fi
cp -v ./output/${var}.CL.dat ./input/divaparam/${var}.CL.dat.filtered
fi
#
#                 ********** 
#
if [ -f './output/'$var'.CL.dat' ];then
#
lay0=`head -1 './output/'$var'.Lay.dat' ` 
for dep in `cat './output/'$var'.Lay.dat'`
do
##dep=$lay1
##while [ $dep -le $lay2 ]
##do
 let lev=10000+$dep
 let lev1=$dep+1
dd=1
let nlen=$lev1-$lay0
##let nlen=$lev1-$lay1
#
Fileinf='./output/'$var'.CL.dat'
{
while [ $dd -le $nlen ]
do
read clparam
dd=`expr $dd + 1`
done
} < $Fileinf
#
#
echo 'oooooooooooooooooooooooo'
echo 'diva3Dclop: rewriting param.par.'$var'.'$lev':  CL = '$clparam
echo 'oooooooooooooooooooooooo'
#
Fileinf='./input/divaparam/param.par.'$var'.'$lev
{
read comment1
read param1
read comment2
read param2
read comment3
read param3
read comment4
read param4
read comment5
read param5
read comment6
read param6
read comment7
read param7
read comment8
read param8
read comment9
read param9
read comment10
read param10
read comment11
read param11
read comment12
read param12
read comment13
read param13
} < $Fileinf
#
#
if [ -f ./output/newparams ];then
rm ./output/newparams
fi
#
echo $comment1 >> ./output/newparams
echo $clparam >> ./output/newparams
echo $comment2 >> ./output/newparams
echo $param2 >> ./output/newparams
echo $comment3 >> ./output/newparams
echo $param3 >> ./output/newparams
echo $comment4 >> ./output/newparams
echo $param4 >> ./output/newparams
echo $comment5 >> ./output/newparams
echo $param5 >> ./output/newparams
echo $comment6 >> ./output/newparams
echo $param6 >> ./output/newparams
echo $comment7 >> ./output/newparams
echo $param7 >> ./output/newparams
echo $comment8 >> ./output/newparams
echo $param8 >> ./output/newparams
echo $comment9 >> ./output/newparams
echo $param9 >> ./output/newparams
echo $comment10 >> ./output/newparams
echo $param10 >> ./output/newparams
echo $comment11 >> ./output/newparams
echo $param11 >> ./output/newparams
echo $comment12 >> ./output/newparams
echo $param12 >> ./output/newparams
echo $comment13 >> ./output/newparams
echo $param13 >> ./output/newparams
#
mv ./output/newparams './input/divaparam/param.par.'$var'.'$lev
#
dep=`expr $dep + 1`
done
#
fi
fi
#
